{# ENUMERATE INTERFACES PER-VRF -#}

{% set int_instances = {} -%}

{% for vlan_name, int_conf in (vlan_ints|default({})).items() %}
  {% set int_name = ("irb." ~ (vlans[vlan_name].id)) %}
  {% set instance_name = (int_conf.instance | default(default_instance)) %}
  {% if instance_name != "underlay" %}
    {% set _dummy = int_instances.update({int_name: instance_name}) %}
  {% endif %}
{% endfor -%}

{% for int_name, int_conf in (ip_ints|default({})).items() %}
  {% set int_name = (int_name ~ ".0") %}
  {% set instance_name = (int_conf.instance | default(default_instance)) %}
  {% if instance_name != "underlay" %}
    {% set _dummy = int_instances.update({int_name: instance_name}) %}
  {% endif %}
{% endfor -%}

replace: routing-instances {
    {% for instance in (int_instances.values() | unique() | sort()) %}
    {{ instance }} {
        routing-options {
            multipath;
        }
        protocols {
            evpn {
                ip-prefix-routes {
                    advertise direct-nexthop;
                    encapsulation vxlan;
                    vni {{ routing_instances[instance].vni }};
                    export EXPORT_EVPN;
                }
            }

      {% if (device_bgp | d(False)) or ("dynamic_bgp" in routing_instances[instance]) %}
            bgp {
                local-as {{ bgp.evpn_as }};
        {% if "routing_instance" in (device_bgp | d([])) %}
          {% if instance in device_bgp.routing_instance %}
                {% for group_name, group_conf in (device_bgp.routing_instance[instance].groups | d({})).items() %}
                group {{ group_name }} {
                    type {{ group_conf.type | default('external') }};
                    family inet {
                        unicast;
                    }
                    export {{ group_conf.export | d('NONE') }};
                    {% for peer_ip, peer_conf in group_conf.peers.items() %}
                    neighbor {{ peer_ip }} {
                        description "{{ peer_conf.descr |d("BGP PEER " ~ peer_ip) }}";
                        peer-as {{ peer_conf.peer_as }};
                    }
                    {% endfor %}
                }
                {% endfor %}
                {% for group_name, group_conf in (device_bgp.routing_instance[instance].v6_groups | d({})).items() %}
                group {{ group_name }} {
                    type {{ group_conf.type | default('external') }};
                    family inet6 {
                        unicast;
                    }
                    export {{ group_conf.export | d('NONE') }};
                    {% for peer_ip, peer_conf in group_conf.peers.items() %}
                    neighbor {{ peer_ip }} {
                        description "{{ peer_conf.descr |d("BGP PEER " ~ peer_ip) }}";
                        peer-as {{ peer_conf.peer_as }};
                    }
                    {% endfor %}
                }
                {% endfor %}
          {% endif %}
        {% endif %} 

        {% if "dynamic_bgp" in routing_instances[instance] and (vlan_ints | d(False)) %}
            {% for group_name, group_conf in (routing_instances[instance].dynamic_bgp.groups | d({})).items() %}
                group {{ group_name }}_V4 {
                    type {{ group_conf.type | default('external') }};
                    family inet {
                        unicast;
                    }
                    export {{ group_conf.export | d('NONE') }};
                    peer-as {{ group_conf.peer_as }}
                    {% if "md5" in group_conf %}
                    authentication-key "{{ group_conf.md5 }}"; ## SECRET-DATA
                    {% endif %}
                    {% for vlan_name, int_conf in vlan_ints.items() %}
                    dynamic-neighbor {{ vlan_name }} {
                        allow {{ int_conf.ipv4 | ipaddr('network/prefix') }};
                    }        
                    {% endfor %}
  
                }
                group {{ group_name }}_V6 {
                    type {{ group_conf.type | default('external') }};
                    family inet6 {
                        unicast;
                    }
                    export {{ group_conf.export | d('NONE') }};
                    peer-as {{ group_conf.peer_as }}
                    {% if "md5" in group_conf %}
                    authentication-key "{{ group_conf.md5 }}"; ## SECRET-DATA
                    {% endif %}
                    {% for vlan_name, int_conf in vlan_ints.items() %}
                    dynamic-neighbor {{ vlan_name }} {
                        allow {{ int_conf.ipv6 | ipaddr('network/prefix') }};
                    }
                    {% endfor %}

                }
            {% endfor %}
        {% endif %}
            }
      {% endif %}
        }
        instance-type vrf;
        {% if vlan_ints | d(False) %}
        forwarding-options {
            dhcp-relay {
                relay-option-82 {
                    circuit-id {
                        prefix {
                            host-name;
                        }
                    }
                }
                server-group {
                    INSTALL-SERVER {
                        {% for dhcp_server in dhcp_servers %}
                        {{ dhcp_server }};
                        {% endfor %}
                    }
                }
                group DHCP-RELAY {
                    active-server-group INSTALL-SERVER;
                    {% for int_name, instance_name in int_instances.items() %}
                      {% if instance_name == instance and int_name.startswith('irb') %}
                    interface {{ int_name }};
                      {% endif %}
                    {% endfor %}
                }
            }
        }
        {% endif %}
        {% for int_name, instance_name in int_instances.items() %}
          {% if instance_name == instance %}
        interface {{ int_name }};
          {% endif %}
        {% endfor %}
        interface lo0.{{ loop.index }};
        route-distinguisher {{ devices[hostname].loopback}}:{{ routing_instances[instance].vni }};
        vrf-target target:{{ bgp.evpn_as }}:{{ routing_instances[instance].vni }};
    }
    {% endfor %}
}
