{# ENUMERATE INTERFACES PER-VRF -#}

{% set int_instances = {} -%}

{% for vlan_name, int_conf in (vlan_ints|default({})).items() %}
  {% set int_name = ("irb." ~ (vlans[vlan_name].id)) %}
  {% set instance_name = (int_conf.instance | default(default_instance)) %}
  {% if instance_name != "underlay" %}
    {% set _dummy = int_instances.update({int_name: instance_name}) %}
  {% endif %}
{% endfor -%}

{% for int_name, int_conf in (ip_ints|default({})).items() %}
  {% set int_name = (int_name ~ ".0") %}
  {% set instance_name = (int_conf.instance | default(default_instance)) %}
  {% if instance_name != "underlay" %}
    {% set _dummy = int_instances.update({int_name: instance_name}) %}
  {% endif %}
{% endfor -%}

replace: routing-instances {
    {% for instance in (int_instances.values() | unique() | sort()) %}
    {{ instance }} {
        routing-options {
            multipath;
        }
        protocols {
            evpn {
                ip-prefix-routes {
                    advertise direct-nexthop;
                    encapsulation vxlan;
                    vni {{ routing_instances[instance].vni }};
                    export EXPORT_EVPN;
                }
            }

      {% if device_bgp | default(False) %}
        {% if "routing_instance" in device_bgp %}
          {% if instance in device_bgp.routing_instance %}
            bgp {
                local-as {{ bgp.evpn_as }};
                {% for group_name, group_conf in device_bgp.routing_instance[instance].groups.items() %}
                group {{ group_name }} {
                    type {{ group_conf.type | default('external') }};
                    family inet {
                        unicast;
                    }
                    {% if "export" in group_conf %}export {{ group_conf.export }};{% endif %}
                    {% for peer_ip, peer_conf in group_conf.peers.items() %}
                    neighbor {{ peer_ip }} {
                        {% if "descr" in peer_conf %}description "{{ peer_conf.descr }}";{% endif %}
                        family inet {
                            unicast {
                                accepted-prefix-limit {
                                    maximum 20;
                                    teardown;
                                }
                            }
                        }
                        peer-as {{ peer_conf.remote_as }};
                    }
                    {% endfor %}
                }
                {% endfor %}
            }
          {% endif %}
        {% endif %}
      {% endif %}

        }
        instance-type vrf;
        {% for int_name, instance_name in int_instances.items() %}
          {% if instance_name == instance %}
        interface {{ int_name }};
          {% endif %}
        {% endfor %}
        interface lo0.{{ loop.index }};
        route-distinguisher {{ devices[hostname].loopback}}:{{ routing_instances[instance].vni }};
        vrf-target target:{{ bgp.evpn_as }}:{{ routing_instances[instance].vni }};
    }
    {% endfor %}
}
